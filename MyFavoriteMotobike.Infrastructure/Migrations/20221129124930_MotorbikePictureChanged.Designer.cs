// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyFavoriteMotorbike.Infrastructure.Data;

#nullable disable

namespace MyFavoriteMotorbike.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221129124930_MotorbikePictureChanged")]
    partial class MotorbikePictureChanged
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MyFavoriteMotobike.Infrastructure.Data.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CountryOfOriginId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("CountryOfOriginId");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Kawasaki"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Honda"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Yamaha"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Suzuki"
                        },
                        new
                        {
                            Id = 5,
                            Name = "KTM"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Beta"
                        },
                        new
                        {
                            Id = 7,
                            Name = "BMW"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Triumph"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Husaberg"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Harley Davidson"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Indian"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Royal Enfield"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Husqvarna"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Ural"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Gima Motorcycles"
                        },
                        new
                        {
                            Id = 16,
                            Name = "GasGas"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Sherco"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Scorpa"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Dnepr M-72"
                        });
                });

            modelBuilder.Entity("MyFavoriteMotobike.Infrastructure.Data.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Motocross"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Dirt Bike"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Sport Bike"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Touring"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Standard"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Street Fighter"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Dual Sport"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Custom"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Cafe Racer"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Stunt"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Trial"
                        });
                });

            modelBuilder.Entity("MyFavoriteMotobike.Infrastructure.Data.Entities.CountryOfOrigin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("CountriesOfOrigin");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Japan"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Austria"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Italy"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Germany"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Great Britain"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Sweden"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Unated States of America"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Spain"
                        },
                        new
                        {
                            Id = 9,
                            Name = "France"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Russia"
                        });
                });

            modelBuilder.Entity("MyFavoriteMotobike.Infrastructure.Data.Entities.Motorbike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<decimal>("CubicCentimeters")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("PricePerDay")
                        .HasPrecision(18, 2)
                        .HasColumnType("money");

                    b.Property<string>("RenterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("UserMotorbikeId")
                        .HasColumnType("int");

                    b.Property<string>("Variety")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("RenterId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserMotorbikeId");

                    b.ToTable("Motorbikes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 1,
                            CategoryId = 1,
                            CubicCentimeters = 250.00m,
                            Description = "This bike is for racing and amateur riding on a motocross track!",
                            ImageUrl = "https://content2.kawasaki.com/ContentStorage/KMC/Products/8711/c5b45b1d-afef-445c-a721-671cf7b09dcb.png?w=850",
                            IsActive = false,
                            PricePerDay = 100.00m,
                            Variety = "KX"
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 2,
                            CategoryId = 2,
                            CubicCentimeters = 450.00m,
                            Description = "This bike is for riding through mountains and off-road terrain!",
                            ImageUrl = "https://www.motowag.com/wp-content/uploads/2022/05/honda-crf450x.jpg",
                            IsActive = false,
                            PricePerDay = 100.00m,
                            Variety = "CRF"
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 4,
                            CategoryId = 3,
                            CubicCentimeters = 1300.00m,
                            Description = "This bike is for riding on the road and it's one of the fastest bikes ever!",
                            ImageUrl = "https://dizzyriders.bg/uploads/thumbs/gallery/2021-02/fe6c02c5a7fe382814b184f1c9e0bb62-620x427.jpg",
                            IsActive = false,
                            PricePerDay = 200.00m,
                            Variety = "Hayabusa"
                        },
                        new
                        {
                            Id = 4,
                            BrandId = 7,
                            CategoryId = 4,
                            CubicCentimeters = 1250.00m,
                            Description = "This bike is for long and comfortable riding on the road!",
                            ImageUrl = "https://ultimatemotorcycling.com/wp-content/uploads/2021/07/2022-bmw-r-1250-rt-first-look-sport-touring-motorcycle-10.jpg",
                            IsActive = false,
                            PricePerDay = 200.00m,
                            Variety = "R1250RT"
                        },
                        new
                        {
                            Id = 5,
                            BrandId = 8,
                            CategoryId = 5,
                            CubicCentimeters = 900.00m,
                            Description = "This bike is for easy riding on the road!",
                            ImageUrl = "https://imgd.aeplcdn.com/1280x720/bw/models/triumph-street-twin-2021-standard20210401131021.jpg?q=80",
                            IsActive = false,
                            PricePerDay = 100.00m,
                            Variety = "Street Twin"
                        },
                        new
                        {
                            Id = 6,
                            BrandId = 3,
                            CategoryId = 6,
                            CubicCentimeters = 155.00m,
                            Description = "This bike is for riding on the road mostly in the city!",
                            ImageUrl = "https://www.indiacarnews.com/wp-content/uploads/2019/03/Yamaha-MT-15-International.jpg",
                            IsActive = false,
                            PricePerDay = 100.00m,
                            Variety = "MT-15"
                        },
                        new
                        {
                            Id = 7,
                            BrandId = 5,
                            CategoryId = 7,
                            CubicCentimeters = 990.00m,
                            Description = "This adventure is for almost any terreain!",
                            ImageUrl = "https://mcn-images.bauersecure.com/wp-images/19502/951x634/990_adventure_dakar.jpg?mode=max&quality=90&scale=down",
                            IsActive = false,
                            PricePerDay = 100.00m,
                            Variety = "Adventure"
                        },
                        new
                        {
                            Id = 8,
                            BrandId = 10,
                            CategoryId = 9,
                            CubicCentimeters = 1868.00m,
                            Description = "This bike outstanding cafe racer!",
                            ImageUrl = "https://www.harley-davidson.com/content/dam/h-d/images/product-images/bikes/motorcycle/2022/2022-fat-boy-114/gallery/2022-fat-boy-114-motorcycle-g2.jpg?impolicy=myresize&rw=820",
                            IsActive = false,
                            PricePerDay = 200.00m,
                            Variety = "Fat Boy"
                        },
                        new
                        {
                            Id = 9,
                            BrandId = 11,
                            CategoryId = 9,
                            CubicCentimeters = 1811.00m,
                            Description = "This bike is greatest chief of indians!",
                            ImageUrl = "https://www.webbikeworld.com/wp-content/uploads/2022/07/2022-Indian-Scout-Bobber-Sixty-4.jpg",
                            IsActive = false,
                            PricePerDay = 200.00m,
                            Variety = "Super Chief"
                        },
                        new
                        {
                            Id = 10,
                            BrandId = 6,
                            CategoryId = 2,
                            CubicCentimeters = 300.00m,
                            Description = "This bike is magnificent mountain climber!",
                            ImageUrl = "https://enduro21.com/images/2021/november-2021/2022-beta-300-rx/2022_beta_300_rx_1.jpg",
                            IsActive = false,
                            PricePerDay = 100.00m,
                            Variety = "RR300 2T"
                        });
                });

            modelBuilder.Entity("MyFavoriteMotobike.Infrastructure.Data.Entities.UserMotorbike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("MotorbikeId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("MotorbikeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserMotorbikes");
                });

            modelBuilder.Entity("MyFavoriteMotobike.Infrastructure.Data.Entities.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.HasDiscriminator().HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = "81693837-9353-4dac-a5f2-4eade35a30f9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8d7e0644-9b18-4b18-a79d-3985e5d7a45a",
                            Email = "administrator@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "administrator@mail.com",
                            NormalizedUserName = "administrator@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEMX4z2EugaEiKleigO4CbVAhaQdoHFSphmbPTMU1IoNu+LLowhU6fUoGIjJEGn+84g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7551f1d2-6f92-494f-9037-44d972cb5a01",
                            TwoFactorEnabled = false,
                            UserName = "administrator@mail.com"
                        },
                        new
                        {
                            Id = "8700b0e1-1cc6-4e31-81d8-0dc734f1d679",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b1686889-1c94-441e-aaff-7e4feec27c1c",
                            Email = "guest@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "guest@mail.com",
                            NormalizedUserName = "guest@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEOnzUJSMdA2vXsGSEtxA3TJ5YVCO6gZ65xJ3kFpXDemzCTeKtgkUGlOpheDbKaDiiw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d221f664-2a27-488f-8abd-c32e5f4c10a7",
                            TwoFactorEnabled = false,
                            UserName = "guest@mail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyFavoriteMotobike.Infrastructure.Data.Entities.Brand", b =>
                {
                    b.HasOne("MyFavoriteMotobike.Infrastructure.Data.Entities.CountryOfOrigin", null)
                        .WithMany("Brands")
                        .HasForeignKey("CountryOfOriginId");
                });

            modelBuilder.Entity("MyFavoriteMotobike.Infrastructure.Data.Entities.Motorbike", b =>
                {
                    b.HasOne("MyFavoriteMotobike.Infrastructure.Data.Entities.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyFavoriteMotobike.Infrastructure.Data.Entities.Category", "Category")
                        .WithMany("Motorbikes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Renter")
                        .WithMany()
                        .HasForeignKey("RenterId");

                    b.HasOne("MyFavoriteMotobike.Infrastructure.Data.Entities.User", null)
                        .WithMany("Motorbikes")
                        .HasForeignKey("UserId");

                    b.HasOne("MyFavoriteMotobike.Infrastructure.Data.Entities.UserMotorbike", null)
                        .WithMany("Motorbikes")
                        .HasForeignKey("UserMotorbikeId");

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Renter");
                });

            modelBuilder.Entity("MyFavoriteMotobike.Infrastructure.Data.Entities.UserMotorbike", b =>
                {
                    b.HasOne("MyFavoriteMotobike.Infrastructure.Data.Entities.Brand", null)
                        .WithMany("UserMotorbikes")
                        .HasForeignKey("BrandId");

                    b.HasOne("MyFavoriteMotobike.Infrastructure.Data.Entities.Motorbike", "Motorbike")
                        .WithMany("UserMotorbikes")
                        .HasForeignKey("MotorbikeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Motorbike");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyFavoriteMotobike.Infrastructure.Data.Entities.Brand", b =>
                {
                    b.Navigation("UserMotorbikes");
                });

            modelBuilder.Entity("MyFavoriteMotobike.Infrastructure.Data.Entities.Category", b =>
                {
                    b.Navigation("Motorbikes");
                });

            modelBuilder.Entity("MyFavoriteMotobike.Infrastructure.Data.Entities.CountryOfOrigin", b =>
                {
                    b.Navigation("Brands");
                });

            modelBuilder.Entity("MyFavoriteMotobike.Infrastructure.Data.Entities.Motorbike", b =>
                {
                    b.Navigation("UserMotorbikes");
                });

            modelBuilder.Entity("MyFavoriteMotobike.Infrastructure.Data.Entities.UserMotorbike", b =>
                {
                    b.Navigation("Motorbikes");
                });

            modelBuilder.Entity("MyFavoriteMotobike.Infrastructure.Data.Entities.User", b =>
                {
                    b.Navigation("Motorbikes");
                });
#pragma warning restore 612, 618
        }
    }
}
